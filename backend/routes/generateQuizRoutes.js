const express = require("express");
const multer = require("multer");
const pdfParse = require("pdf-parse");
const fs = require("fs");
const axios = require("axios");
const router = express.Router();
const Quiz = require("../models/Quiz");
const upload = multer({ dest: "uploads/" });

// üì§ POST /api/generate/upload
router.post("/upload", upload.single("file"), async (req, res) => {
    try {
        // üìÑ ƒê·ªçc n·ªôi dung PDF
        const fileBuffer = fs.readFileSync(req.file.path);
        console.log("üì• File nh·∫≠n ƒë∆∞·ª£c:", req.file);

        const pdfData = await pdfParse(fileBuffer);
        let textContent = pdfData.text;
        let quizTitle = textContent.split("\n")[0].trim();
        if (quizTitle.length > 50 || quizTitle.length < 5) {
            quizTitle = "√în t·∫≠p t·ª± ƒë·ªông";
        }
        // üßπ L√†m s·∫°ch format text sau khi extract t·ª´ PDF
        textContent = textContent
            .replace(/\r/g, "") // lo·∫°i b·ªè k√Ω t·ª± xu·ªëng d√≤ng \r
            .replace(/\n{2,}/g, "\n") // b·ªè nhi·ªÅu d√≤ng tr·∫Øng li·ªÅn nhau
            .replace(/([a-zA-Z0-9])\n(?=[a-zA-Z0-9])/g, "$1 ") // g·ªôp d√≤ng b·ªã ng·∫Øt gi·ªØa t·ª´
            .replace(/\t+/g, " ") // thay tab th√†nh d·∫•u c√°ch
            .trim();

        // N·∫øu D√†i h∆°n 10 ngh√¨n k√Ω t·ª± th√¨ t·ª± ƒë·ªông c·∫Øt ng·∫Øn
        if (textContent.length > 10000) {
            textContent = textContent.slice(0, 10000);
        }
        console.log("üîç PDF length:", textContent.length);

        //  Prompt
        const prompt = `
D·ª±a tr√™n n·ªôi dung t√†i li·ªáu sau, h√£y t·∫°o 5 c√¢u h·ªèi tr·∫Øc nghi·ªám.  
M·ªói c√¢u g·ªìm 4 l·ª±a ch·ªçn v√† 1 ƒë√°p √°n ƒë√∫ng.  
Tr√¨nh b√†y nh∆∞ sau:

---
C√¢u h·ªèi: ...
A) ...
B) ...
C) ...
D) ...
ƒê√°p √°n: ...
---

D∆∞·ªõi ƒë√¢y l√† n·ªôi dung t√†i li·ªáu:

${textContent}
`;

        const response = await axios.post(
            "https://api.openai.com/v1/chat/completions",
            {
                model: "gpt-4o",
                messages: [{ role: "user", content: prompt }],
                temperature: 0.7,
                max_tokens: 1500,
            },
            {
                headers: {
                    Authorization: `Bearer ${process.env.OPENAI_API_KEY}`,
                    "Content-Type": "application/json",
                },
            }
        );

        // X√≥a file c≈© ƒëi khi m√† up file m·ªõi
        fs.unlinkSync(req.file.path);

        const aiContent = response.data.choices[0].message.content;

        //  Parse c√¢u h·ªèi t·ª´ text
        const rawQuestions = aiContent
            .split("\n\n")
            .filter((q) => q.trim() !== "");

        const parsedQuestions = rawQuestions.map((block) => {
            const lines = block.split("\n").map((l) => l.trim());

            const questionLine = lines
                .find((l) => l.toLowerCase().startsWith("c√¢u h·ªèi:"))
                ?.slice(9)
                .trim();

            const answers = lines
                .filter((l) => /^[ABCD]\)/.test(l))
                .map((l) => ({
                    option: l.slice(3).trim(),
                }));

            const answerLine = lines.find((l) =>
                l.toLowerCase().startsWith("ƒë√°p √°n")
            );
            const correctLetter = answerLine
                ?.split(":")[1]
                ?.trim()
                ?.toUpperCase();
            const answerIndex = ["A", "B", "C", "D"].indexOf(correctLetter);

            return {
                question: questionLine || "C√¢u h·ªèi kh√¥ng x√°c ƒë·ªãnh",
                answers,
                answer: answerIndex !== -1 ? answerIndex : 0,
                isEnabled: true,
                explanation: "",
            };
        });

        //  L∆∞u quiz v√†o MongoDB
        const timestamp = new Date().toISOString().replace(/[:.]/g, "-");

        const newQuiz = new Quiz({
            name: `${quizTitle} - ${timestamp}`,
            instructions: "Tr·∫£ l·ªùi c√°c c√¢u h·ªèi sau",
            isEnabled: true,
            questions: parsedQuestions,
            duration: { minutes: 10 },
            category: req.body.category || "Kh√°c",
            source: "AI",
            // owner: req.user?._id,
        });

        const savedQuiz = await newQuiz.save();

        res.json({
            message: "Quiz ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng",
            quizId: savedQuiz._id,
            questions: savedQuiz.questions,
        });
    } catch (error) {
        console.error("‚ùå Error generating/saving quiz:", error.message);
        if (error.response) {
            console.error("üîÅ Response data:", error.response.data);
        }
        res.status(500).json({ error: "Kh√¥ng th·ªÉ t·∫°o quiz t·ª´ t√†i li·ªáu." });
    }
});

module.exports = router;
