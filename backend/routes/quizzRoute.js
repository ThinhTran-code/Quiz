const express = require("express");
const Quiz = require("../models/Quiz");
const auth = require("../middleware/authmiddleware");
const QuizAttempt = require("../models/QuizAttempt");
const authorizeAdmin = require("../middleware/authorizeAdmin");
const router = express.Router();

// üìå L·∫•y t·∫•t c·∫£ quiz theo category
router.get("/category/:categoryName", async (req, res) => {
    try {
        const quizzes = await Quiz.find({
            category: req.params.categoryName,
            isEnabled: true,
        }).select("name instructions duration");
        if (quizzes.length === 0) {
            return res
                .status(404)
                .json({ message: "Kh√¥ng t√¨m th·∫•y quiz thu·ªôc category n√†y" });
        }
        res.json(quizzes);
    } catch (err) {
        res.status(500).json({ message: err.message });
    }
});

// üìå T·∫°o quiz m·ªõi ‚Äì admin c·∫ßn nh·∫≠p category
router.post("/create", auth, authorizeAdmin, async (req, res) => {
    try {
        const { name, instructions, questions, duration, category } = req.body;
        if (!category) {
            return res.status(400).json({ message: "Quiz c·∫ßn c√≥ category" });
        }

        const quiz = await Quiz.create({
            name,
            instructions,
            questions,
            duration,
            category, // ‚úÖ Th√™m category v√†o quiz
            owner: req.user.userId,
            source: "ai",
        });

        res.status(201).json(quiz);
    } catch (err) {
        res.status(500).json({ message: err.message });
    }
});

router.get("/", async (req, res) => {
    try {
        const quizzes = await Quiz.find({ isEnabled: true }).select(
            "name instructions duration category"
        );
        res.json(quizzes);
    } catch (err) {
        res.status(500).json({ message: err.message });
    }
});

router.get("/:id", async (req, res) => {
    try {
        const quiz = await Quiz.findById(req.params.id);
        if (!quiz || !quiz.isEnabled) {
            return res
                .status(404)
                .json({ message: "Quiz kh√¥ng t·ªìn t·∫°i ho·∫∑c b·ªã v√¥ hi·ªáu h√≥a" });
        }
        res.json(quiz);
    } catch (err) {
        res.status(500).json({ message: err.message });
    }
});

router.post("/submit", async (req, res) => {
    console.log("üì° API nh·∫≠n d·ªØ li·ªáu:", req.body);

    const { quizId, userId, answers, totalQuestions } = req.body;

    // Ki·ªÉm tra c√°c tr∆∞·ªùng b·∫Øt bu·ªôc
    if (!quizId || !userId || !answers || !Array.isArray(answers)) {
        return res.status(400).json({ message: "Thi·∫øu th√¥ng tin c·∫ßn thi·∫øt" });
    }

    try {
        const quiz = await Quiz.findById(quizId);
        if (!quiz)
            return res.status(404).json({ message: "Quiz kh√¥ng t·ªìn t·∫°i" });

        // ‚úÖ Ki·ªÉm tra s·ªë l∆∞·ª£ng c√¢u tr·∫£ l·ªùi ph·∫£i kh·ªõp v·ªõi s·ªë c√¢u h·ªèi
        if (answers.length !== quiz.questions.length) {
            return res.status(400).json({
                message: `B·∫°n c·∫ßn l√†m t·∫•t c·∫£ c√¢u h·ªèi. T·ªïng c√¢u h·ªèi: ${quiz.questions.length}, b·∫°n tr·∫£ l·ªùi: ${answers.length}`,
            });
        }

        let score = 0;

        const processedAnswers = answers.map((userAns) => {
            const question = quiz.questions.find(
                (q) => q._id.toString() === userAns.questionId.toString()
            );

            if (!question) {
                return {
                    questionId: userAns.questionId,
                    selectedAnswer: userAns.selectedAnswer,
                    isCorrect: false,
                };
            }

            const selected = Number(userAns.selectedAnswer);
            const correct = Number(question.answer);
            const isCorrect = selected === correct;

            if (isCorrect) score++;

            return {
                questionId: userAns.questionId,
                selectedAnswer: selected,
                isCorrect,
            };
        });

        console.log("‚úÖ T·ªïng s·ªë c√¢u ƒë√∫ng:", score);

        const quizAttempt = new QuizAttempt({
            user: userId,
            quiz: quizId,
            totalQuestions: quiz.questions.length,
            answers: processedAnswers,
            score,
        });

        await quizAttempt.save();
        console.log("‚úÖ QuizAttempt l∆∞u th√†nh c√¥ng:", quizAttempt);

        res.json({ message: "N·ªôp b√†i th√†nh c√¥ng!", quizAttempt });
    } catch (error) {
        res.status(500).json({
            message: "L·ªói x·ª≠ l√Ω k·∫øt qu·∫£ quiz",
            error: error.message,
        });
    }
});

// üìå L·∫•y flashcards t·ª´ quiz
router.get("/:quizId/flashcards", async (req, res) => {
    try {
        const quiz = await Quiz.findById(req.params.quizId);
        if (!quiz) return res.status(404).json({ error: "Quiz kh√¥ng t·ªìn t·∫°i" });

        const flashcards = quiz.questions.map((q) => ({
            question: q.question,
            answer:
                q.explanation ||
                (q.answers[q.answer]?.option ?? "Kh√¥ng c√≥ ƒë√°p √°n"),
        }));

        res.json(flashcards);
    } catch (error) {
        res.status(500).json({ error: "L·ªói khi l·∫•y flashcards" });
    }
});
router.get("/category/:categoryName", async (req, res) => {
    try {
        const quizzes = await Quiz.find({
            category: req.params.categoryName,
            isEnabled: true,
        }).lean();

        console.log("üî• D·ªØ li·ªáu Mongo:", quizzes);

        if (quizzes.length === 0) {
            return res
                .status(404)
                .json({ message: "Kh√¥ng t√¨m th·∫•y quiz thu·ªôc category n√†y" });
        }
        res.json(quizzes);
    } catch (err) {
        res.status(500).json({ message: err.message });
    }
});

module.exports = router;
