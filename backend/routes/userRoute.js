const express = require("express");
const bcrypt = require("bcryptjs");
const jwt = require("jsonwebtoken");
const User = require("../models/User");

const router = express.Router();

// ƒêƒÉng k√Ω
router.post("/register", async (req, res) => {
    const { username, email, password, role } = req.body;

    try {
        const existingUser = await User.findOne({ email });
        if (existingUser)
            return res.status(400).json({ message: "Email ƒë√£ t·ªìn t·∫°i" });

        const hashedPassword = await bcrypt.hash(password, 10);

        const user = new User({
            username,
            email,
            password: hashedPassword,
            role: role || "user", // <-- ƒê·∫¢M B·∫¢O c√≥ d√≤ng n√†y
        });

        await user.save();

        res.status(201).json({ message: "ƒêƒÉng k√Ω th√†nh c√¥ng" });
    } catch (err) {
        res.status(500).json({ message: err.message });
    }
});
router.post("/login", async (req, res) => {
    const { email, password } = req.body;

    try {
        const user = await User.findOne({ email });
        if (!user)
            return res
                .status(404)
                .json({ message: "Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i" });

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch)
            return res.status(400).json({ message: "M·∫≠t kh·∫©u kh√¥ng ƒë√∫ng" });

        const token = jwt.sign(
            { userId: user._id, role: user.role },
            process.env.JWT_KEY,
            { expiresIn: "1h" }
        );

        console.log("‚úÖ API tr·∫£ v·ªÅ:", {
            token,
            userId: user._id,
            role: user.role,
        }); // üî• Ki·ªÉm tra log

        res.json({
            token,
            userId: user._id.toString(), // üî• Chuy·ªÉn ObjectId th√†nh string
            role: user.role,
            username: user.username,
        });
        // üî• ƒê·∫£m b·∫£o `userId` ƒë∆∞·ª£c tr·∫£ v·ªÅ
    } catch (error) {
        console.error("‚ùå L·ªói ƒëƒÉng nh·∫≠p:", error.message);
        res.status(500).json({
            message: "L·ªói x·ª≠ l√Ω ƒëƒÉng nh·∫≠p",
            error: error.message,
        });
    }
});
router.get("/profile", async (req, res) => {
    try {
        const token = req.headers.authorization?.split(" ")[1];
        if (!token) return res.status(401).json({ message: "Kh√¥ng c√≥ token" });

        const decoded = jwt.verify(token, process.env.JWT_KEY);
        const user = await User.findById(decoded.userId).select("-password"); // Kh√¥ng tr·∫£ v·ªÅ m·∫≠t kh·∫©u

        if (!user)
            return res
                .status(404)
                .json({ message: "Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng" });

        res.json(user);
    } catch (err) {
        res.status(500).json({ message: "L·ªói server", error: err.message });
    }
});

module.exports = router;
